import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Admin.module.css'
import Footer from "./components/Footer/footer.js";
import Header from "./components/Header/header.js"
import { Icon, Table, Button, Input, Dropdown } from 'semantic-ui-react'
import { useState } from 'react';
import React from "react"
import ActiveLink from './components/ActiveLink';

export default function Volumes() {
    const [render, setRender] = useState(false);
    getLoginInfo().then(data => {
        if (!data.error) {
            setRender(true);
        }
    })
    return (
        <div>
            <Head>
                <title>Volumes | NDS</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/logo.svg" />
            </Head>
            <main>
                <Header />
                <div className='main'>
                    <Body render={render} />
                </div>
            </main>
            <Footer />
        </div>
    )
}
function Body(props) {
    if (!props.render) return (<h2 style={{ color: "red" }}>Authentication Required!</h2>)
    return (
        <div>
            <h1>Static Storage Spaces</h1>
            <List />
        </div>
    )
}
function List() {
    const [volumes, setVolumes] = useState([{
        name: <Icon loading name="circle notched" />,
        DockerInfo: {
            CreatedAt: ""
        },
        attachedDeployment: <Icon loading name="circle notched" />,
        loading: true
    }]);
    if (volumes[0] && volumes[0].loading) {
        getVolumes().then(data => {
            setVolumes(data)
        })
    }
    return (
        <div>
            <Table celled striped>
                <Table.Header>
                    <Table.Row>
                        <Table.HeaderCell>Name</Table.HeaderCell>
                        <Table.HeaderCell>Created</Table.HeaderCell>
                        <Table.HeaderCell>Status</Table.HeaderCell>
                        <Table.HeaderCell>Attached Deployment</Table.HeaderCell>
                        <Table.HeaderCell>Actions</Table.HeaderCell>
                    </Table.Row>
                </Table.Header>

                <Table.Body>
                    {
                        volumes.map((volume, key) => {
                            var color = false;
                            var styles = {};
                            var status = "Ok"
                            if (!volume.DockerInfo) {
                                volume.DockerInfo = { CreatedAt: ""}
                                status = "Volume not found on Docker Engine!"
                                color = true;
                            }
                            if (new URLSearchParams(window.location.search).get("selected") === volume.id) styles = {
                                boxShadow: "0 0 6px #202b6a inset",
                                transition: "all 1s"
                            };
                            return (
                                <Table.Row key={key} error={color} style={styles}>
                                    <Table.Cell>{volume.name}</Table.Cell>
                                    <Table.Cell>{new Date(volume.DockerInfo.CreatedAt).toDateString()}</Table.Cell>
                                    <Table.Cell>{status}</Table.Cell>
                                    <Table.Cell>{volume.attachedDeployment}</Table.Cell>
                                    <Table.Cell style={{fontSize: "15px"}}>
                                        <a style={{ cursor: "pointer" }} onClick={async () => {
                                            if (!confirm("Are you sure you want to delete this volume? This action cannot be undone.")) return;
                                            let results = await fetch(`/api/volumes?auth=${getCachedAuth()}&action=deleteVolume&id=${volume.id}`);
                                            results = await results.json();
                                            alert(results.data || results.error);
                                            setVolumes(await getVolumes())
                                        }}><Icon name='trash alternate outline' /></a>
                                        <ActiveLink href={"/explore/"+volume.id}>
                                            <Icon name="compass outline" style={{marginLeft: "10px"}}/>
                                        </ActiveLink>
                                    </Table.Cell>
                                </Table.Row>
                            )
                        })
                    }
                </Table.Body>
            </Table>
            <Button primary onClick={async () => {
                let name = prompt("Enter a name for the volume")
                let results = await fetch(`/api/volumes?auth=${getCachedAuth()}&action=createVolume&name=${name}`);
                results = await results.json();
                alert(results.data || results.error);
                setVolumes(await getVolumes())
            }}>New Storage Space</Button>
        </div>
    )
}

async function getVolumes() {
    const res = await fetch(`/api/volumes?auth=${getCachedAuth()}&action=listVolumes`);
    const data = await res.json()
    let volumes = data.data;
    let deployments = await getDeployments()
    for (let i in volumes) {
        for (let p in deployments) {
            if (deployments[p].volumes.find(x => {
                if (!volumes[i].DockerInfo) return false;
                else return x.id === volumes[i].DockerInfo.Name.slice("nds-config-".length)
            })) {
                volumes[i].attachedDeployment = deployments[p].name
            } else {
                volumes[i].attachedDeployment = "N/A"
            }
        }
    }
    return volumes
}
async function getDeployments() {
    const response = await fetch(`/api/deployments?auth=${getCachedAuth()}&action=getDeployments`);
    const data = await response.json();
    return data.data
}

async function getLoginInfo() {
    const res = await fetch(`/api/user?auth=${getCachedAuth()}`);
    const data = await res.json()
    return data;
}
function getCachedAuth() {
    if (typeof sessionStorage !== "undefined") {
        if (sessionStorage.getItem("auth")) {
            return sessionStorage.getItem("auth")
        } else {
            return localStorage.getItem("auth")
        }
    }
}