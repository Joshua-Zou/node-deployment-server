import Head from 'next/head'
import Image from 'next/image'
import Footer from "../components/Footer/footer.js";
import PageHeader from "../components/Header/header.js"
import { Header, Table } from 'semantic-ui-react'
import React, { useState } from "react"
import { useRouter } from 'next/router';
import { Icon, Loader, Dimmer } from "semantic-ui-react"
import ActiveLink from '../components/ActiveLink.js';
import styles from "../../styles/deployment.module.css"

export default function Volume(props) {
    const router = useRouter()
    var id = router.query.id
    const [data, setData] = React.useState({
        name: <Icon loading name="circle notched" />,
        DockerInfo: {
            CreatedAt: ""
        },
        attachedDeployments: [
            // eslint-disable-next-line react/jsx-key
            <Icon loading name="circle notched" />
        ],
        loading: true,
    })
    if (data.loading && id) {
        getVolume(id).then(data => { setData(data) })
    }
    return (
        <div>
            <Head>
                <title>Explore volume | NDS</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/logo.svg" />
            </Head>
            <main>
                <PageHeader />
                <div className="main">
                    <VolumeInfo data={data} />
                    <hr style={{ marginTop: "25px" }} />
                    <Explore data={data} id={id} />
                </div>
            </main>
            <Footer />
        </div>
    )
}

function VolumeInfo(props) {
    return (
        <div>
            <h1>Storage Space Information - {props.data.name}</h1>
            <h4>Status: <span style={{ fontWeight: "normal" }}>{props.data.status}</span></h4>
            <h4>Created at: <span style={{ fontWeight: "normal" }}>{new Date(props.data.DockerInfo.CreatedAt).toDateString()}</span></h4>
            <h4>Attached deployments:</h4>
            {
                props.data.attachedDeployments.map(deployment => {
                    return (
                        <div key={deployment.id} style={{ display: "block", marginLeft: "20px" }}>
                            <ActiveLink href={"/deployment/" + deployment.id}>{deployment.name}</ActiveLink>
                        </div>
                    )
                })
            }
        </div>
    )
}
function Explore(props) {
    var id = props.id;
    if (!props.data.exploreSupported) {
        return (
            <div style={{ marginTop: "30px" }}>
                <h3 style={{ color: "red" }}>Explore volume feature not supported on your server!</h3>
                <span>Windows or Linux machine required</span>
            </div>
        )
    } else {
        return (
            <div style={{ marginTop: "30px" }}>
                <h3>Explore Storage Space Data</h3>
                <Files />
            </div>
        )
    }
    function Files() {
        const [files, setFiles] = useState([{
            name: <Icon loading name="circle notched" />,
            loading: true
        }]);
        const [path, setPath] = useState("/");
        const [downloading, setDownloading] = useState(false);
        if (files[0] && files[0].loading) {
            getFiles()
        }
        return (
            <div>
                <Table celled striped selectable>
                    <Table.Header>
                        <Table.Row>
                            <Table.HeaderCell colSpan='3'>{path}
                                <Icon name="level up" onClick={moveUp} style={{ float: "right", cursor: "pointer" }} />
                                <Icon name="download" style={{ float: "right", cursor: "pointer" }} onClick={async () => {
                                    setDownloading(true)
                                    let link = await getDownloadLink(id)
                                    setDownloading(false)
                                    window.open(link)
                                }}></Icon>
                            </Table.HeaderCell>
                        </Table.Row>
                    </Table.Header>

                    <Table.Body>
                        {
                            files.map((file, index) => {
                                let icon = "file outline";
                                let onclick = function () {
                                    window.open("/api/volumes?auth=" + getCachedAuth() + "&action=getFile&id=" + id + "&path=" + path + "/" + file.name)
                                }
                                if (file.isDirectory) {
                                    icon = "folder"
                                    onclick = function () {
                                        moveDown(file.name)
                                    }
                                    file.size = "~"
                                } else {
                                    file.size = normalizeBytes(file.size)
                                }
                                let date = new Date(file.birthtime)
                                return (
                                    <Table.Row key={index} onClick={onclick} className={styles.exploreRow}>
                                        <Table.Cell>
                                            <Icon name={icon} /> {file.name}
                                        </Table.Cell>
                                        <Table.Cell>{file.size}</Table.Cell>
                                        <Table.Cell textAlign='right'>{date.toDateString()}</Table.Cell>
                                    </Table.Row>
                                )
                            })
                        }
                    </Table.Body>
                </Table>
                <Download downloading={downloading}/>
            </div>
        )
        function Download(props) {
            if (props.downloading === false) return <div></div>
            return (
                <Dimmer active style={{position: "fixed", zIndex: "10"}}>
                    <Loader>Preparing File... (Feel free to leave this page)</Loader>
                </Dimmer>
            )
        }
        function moveUp() {
            var newPath = path.split("/").slice(0, -1).join("/")
            if (newPath === "") newPath = "/"
            setPath(newPath)
            setFiles([{
                name: <Icon loading name="circle notched" />,
                loading: true
            }])
        }
        function moveDown(file) {
            if (path.endsWith("/")) {
                setPath(path + file)
            } else {
                setPath(path + "/" + file)
            }
            setFiles([{
                name: <Icon loading name="circle notched" />,
                loading: true
            }])
        }
        function getFiles() {
            if (!id) {
                setTimeout(function () {
                    getFiles()
                }, 1000)
                return;
            }
            fetch(`/api/volumes?auth=${getCachedAuth()}&action=getFiles&id=${id}&path=${path}`)
                .then(res => res.json())
                .then(data => {
                    if (data.error) {
                        setFiles([{
                            name: data.error,
                            loading: false
                        }])
                    } else {
                        console.log(data.data)
                        setFiles(data.data)
                    }
                })
        }
    }
}


async function getDownloadLink(id) {
    let link = await fetch(`/api/volumes?auth=${getCachedAuth()}&action=getDownloadLink&id=${id}`)
    link = await link.json()
    if (link.error) return alert(link.error)
    else return link.data
}
async function getVolume(id) {
    const response = await fetch(`/api/volumes?auth=${getCachedAuth()}&action=getVolume&id=${id}`);
    const data = await response.json();
    let volume = data.data
    let deployments = await getDeployments()
    volume.attachedDeployments = []
    for (let p in deployments) {
        if (deployments[p].volumes.find(x => x.id === volume.DockerInfo.Name.slice("nds-config-".length))) {
            volume.attachedDeployments.push(deployments[p])
        }
    }
    volume.status = "Ok"
    if (!volume.DockerInfo) {
        volume.DockerInfo = { CreatedAt: "" }
        volume.status = "Volume not found on Docker Engine!"
    }
    console.log(volume)
    return volume;
}
async function getDeployments() {
    const response = await fetch(`/api/deployments?auth=${getCachedAuth()}&action=getDeployments`);
    const data = await response.json();
    return data.data
}
function getCachedAuth() {
    if (typeof sessionStorage !== "undefined") {
        if (sessionStorage.getItem("auth")) {
            return sessionStorage.getItem("auth")
        } else {
            return localStorage.getItem("auth")
        }
    }
}
function normalizeBytes(bytes) {
    if (bytes < 1024) {
        return bytes + " Bytes"
    } else if (bytes < 1024 * 1024) {
        return (bytes / 1024).toFixed(2) + " KB"
    } else if (bytes < 1024 * 1024 * 1024) {
        return (bytes / 1024 / 1024).toFixed(2) + " MB"
    } else {
        return (bytes / 1024 / 1024 / 1024).toFixed(2) + " GB"
    }
}