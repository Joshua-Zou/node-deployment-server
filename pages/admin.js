import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Admin.module.css'
import Footer from "./components/Footer/footer.js";
import Header from "./components/Header/header.js"
import { Icon, Table, Button, Input, Dropdown } from 'semantic-ui-react'
import { useState } from 'react';
import SignInModal from "./components/SignInModal/signInModal.js";
import React from "react"
import dynamic from 'next/dynamic'
var CodeEditor = dynamic(import('./components/CodeEditor'), { ssr: false, loading: () => <Icon style={{ fontSize: "2em" }} loading name="circle notched" /> })


var currentEditorValue = "";

export default function Admin() {
  const [renderAddUser, setRenderAddUser] = useState(false);
  const [EditorValue, setEditorValue] = useState("Loading...");
  const [editorError, setEditorError] = useState("");
  getConfigurationFile().then(data => {
    setEditorValue(data)
    currentEditorValue = data;
  })
  return (
    <div>
      <Head>
        <title>Admin Panel | NDS</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.svg" />
      </Head>
      <main>
        <Header />
        <div className='main'>
          <h1>Admin Panel</h1>
          <UserTable newCallback={() => { setRenderAddUser(true) }} />
          <AddUser render={renderAddUser} setRenderAddUser={setRenderAddUser} />
          <h3>Server Port</h3>
          <PortConfig />
          <h3>Configuration File
            <br></br>
            <span style={{ fontSize: "0.8em" }}>(Don&apos;t mess around here if you don&apos;t know exactly what you&apos;re doing)</span>
          </h3>
          <CodeEditor value={EditorValue} onChange={(e) => {
            currentEditorValue = e
          }} />
          <div style={{ marginTop: "10px", textAlign: "right" }}>
            <span style={{ textAlign: "left", position: "absolute", display: "block", color: "orangered" }}>{editorError}</span>
            <Button content="Save" primary onClick={setConfigurationFile} />
          </div>
          <RestartServer />
        </div>
      </main>
      <Footer />
    </div>
  )
  async function setConfigurationFile() {
    const res = await fetch(`/api/admin?auth=${getCachedAuth()}&action=setRawConfigFile&config=${btoa(currentEditorValue)}`);
    const data = await res.json();
    if (data.error) {
      setEditorError(data.error)
    } else {
      alert("Configuration file saved!")
      window.location.reload();
    }
  }
}

function UserTable(props) {
  const [signInModal, setSignInModal] = useState(true);
  const [data, setData] = useState([{
    username: <Icon loading name="circle notched" />,
    password: <Icon loading name="circle notched" />,
    permission: <Icon loading name="circle notched" />,
    loading: true
  }]);

  if (data[0].loading === true) {
    getUserList().then(data => {
      if (data.error) {
        setData([{
          username: <SignInModal show={signInModal} changeShow={setSignInModal} />,
          password: data.error,
          permission: data.error,
          loading: false
        }])
      } else {
        setData(data.data)
      }
    })
  }

  function PasswordView(props) {
    const [show, setShow] = useState(false);
    if (props.password.$$typeof) return <span>{props.password}</span>
    if (show === false) {
      return (
        <div>
          <Icon name='eye' onClick={() => setShow(true)} />
          {"‚óè".repeat(20)}
        </div>
      )
    } else {
      return (
        <div>
          <Icon name='eye slash' onClick={() => setShow(false)} />
          {props.password}
        </div>
      )
    }
  }

  return (
    <Table celled striped>
      <Table.Header>
        <Table.Row>
          <Table.HeaderCell colSpan='3'>Users</Table.HeaderCell>
        </Table.Row>
        <Table.Row>
          <Table.HeaderCell>Username</Table.HeaderCell>
          <Table.HeaderCell>Password</Table.HeaderCell>
          <Table.HeaderCell>Permission</Table.HeaderCell>
          <Table.HeaderCell><a style={{ cursor: "pointer" }} onClick={props.newCallback}><Icon name='plus circle' />New</a></Table.HeaderCell>
        </Table.Row>
      </Table.Header>
      <Table.Body>
        {data.map((user, index) => {
          return (
            <Table.Row key={index} className={styles.row}>
              <Table.Cell collapsing>
                <Icon name='user' /> {user.username}
              </Table.Cell>
              <Table.Cell>
                <PasswordView password={user.password} />
              </Table.Cell>
              <Table.Cell collapsing textAlign='right'>
                {user.permission}
              </Table.Cell>
              <Table.Cell collapsing textAlign='right'>
                <a style={{ cursor: "pointer" }} onClick={() => {
                  if (user.permission === "admin") {
                    alert("You can't delete admin accounts!")
                  } else {
                    if (window.confirm("Are you sure to delete this user?")) {
                      fetch(`/api/admin?auth=${getCachedAuth()}&action=deleteUser&username=${user.username}`)
                        .then(res => res.text())
                        .then(data => {
                          if (data.error) {
                            alert(data.error)
                          } else {
                            alert(JSON.parse(data).data);
                            getUserList().then(data => {
                              setData(data.data)
                            })
                          }
                        })
                    }
                  }
                }}><Icon name='delete' />Delete</a>
              </Table.Cell>
            </Table.Row>
          )
        })}
      </Table.Body>
    </Table>
  )
}
function AddUser(props) {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [permission, setPermission] = useState("");
  if (props.render === false) {
    return (<div></div>)
  }
  return (
    <Table celled striped>
      <Table.Body>
        <Table.Row>
          <Table.Cell collapsing>
            <Input icon='user' iconPosition='left' placeholder='Username' onChange={(e, d) => { setUsername(d.value) }} />
          </Table.Cell>
          <Table.Cell>
            <Input placeholder='Password' onChange={(e, d) => { setPassword(d.value) }} />
          </Table.Cell>
          <Table.Cell collapsing textAlign='right'>
            <Dropdown placeholder='Permission' search selection options={[
              { key: "admin", text: "Admin", value: "admin", disabled: true },
              { key: "readwrite", text: "Read Write", value: "readwrite" },
              { key: "readonly", text: "Read Only", value: "readonly" }
            ]} onChange={(e, d) => { setPermission(d.value) }} />
          </Table.Cell>
          <Table.Cell collapsing textAlign='right'>
            <a style={{ cursor: "pointer" }} onClick={() => {
              props.setRenderAddUser(false)
            }}><Icon name='delete' />Cancel</a>
          </Table.Cell>
        </Table.Row>
        <Table.Row>
          <Table.Cell collapsing></Table.Cell>
          <Table.Cell></Table.Cell>
          <Table.Cell collapsing textAlign='right'></Table.Cell>
          <Table.Cell collapsing textAlign='right'>
            <Button content='Save' primary onClick={() => {
              fetch(`/api/admin?auth=${getCachedAuth()}&action=addUser&username=${username}&password=${password}&permission=${permission}`)
                .then(res => res.text())
                .then(data => {
                  data = JSON.parse(data)
                  if (data.error) {
                    alert(data.error);
                  } else {
                    alert(data.data);
                    window.location.reload()
                    props.setRenderAddUser(false)
                  }
                })
            }} />
          </Table.Cell>
        </Table.Row>
      </Table.Body>
    </Table>
  )
}
function PortConfig(props) {
  var userPort = 0;
  const [port, setPort] = useState(3100);
  getConfigurationFile().then(data => {
    data = JSON.parse(data);
    userPort = data.port || 3100;
    if ((data.port || 3100) === port) return;
    setPort(data.port || 3100)
  })
  return (
    <Table celled striped>
      <Table.Header>
        <Table.Row>
          <Table.HeaderCell colSpan='3'>Port - Changing this will only change the UI server port, and not the deployed application&apos;s port</Table.HeaderCell>
        </Table.Row>
        <Table.Row>
          <Table.HeaderCell><Input type='number' onChange={(e, d) => { userPort = d.value }} placeholder={port} /></Table.HeaderCell>
          <Table.HeaderCell></Table.HeaderCell>
          <Table.HeaderCell></Table.HeaderCell>
          <Table.HeaderCell><a style={{ cursor: "pointer" }} onClick={() => {
            if (window.confirm("Are you sure to change the port?")) {
              fetch(`/api/admin?auth=${getCachedAuth()}&action=changePort&port=${userPort}`)
                .then(res => res.text())
                .then(data => {
                  data = JSON.parse(data)
                  if (data.error) {
                    alert(data.error);
                  } else {
                    alert(data.data);
                    window.location.reload()
                  }
                })
            }
          }}><Icon name='save' />Save</a></Table.HeaderCell>
        </Table.Row>
      </Table.Header>
    </Table>
  )
}
function RestartServer(props) {
  return (
    <div style={{ marginBottom: "20px" }}>
      <h3>Restart Server</h3>
      <Button inverted color='red' onClick={() => {
        fetch(`/api/admin?auth=${getCachedAuth()}&action=restartServer`)
          .then(res => res.text())
          .then(data => {
            data = JSON.parse(data)
            if (data.error) {
              alert(data.error);
            } else {
              alert(data.data);
              window.location.reload()
            }
          })
      }}>
        Restart
      </Button>
      <span style={{ marginLeft: "20px" }}>Restarting the server will NOT kill any running deployments. It will ONLY restart the UI server.</span>
    </div>
  )
}

async function getUserList() {
  const res = await fetch(`/api/admin?auth=${getCachedAuth()}&action=getUserList`);
  const data = await res.json()
  return data;
}

async function getLoginInfo() {
  const res = await fetch(`/api/user?auth=${getCachedAuth()}`);
  const data = await res.json()
  return data;
}
function getCachedAuth() {
  if (typeof sessionStorage !== "undefined") {
      if (sessionStorage.getItem("auth")) {
          return sessionStorage.getItem("auth")
      } else {
          return localStorage.getItem("auth")
      }
  }
}
async function getConfigurationFile() {
  const res = await fetch(`/api/admin?auth=${getCachedAuth()}&action=getRawConfigFile`);
  const data = await res.text()
  return data
}