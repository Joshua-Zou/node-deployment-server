import Head from 'next/head'
import Image from 'next/image'
import Footer from "../components/Footer/footer.js";
import Header from "../components/Header/header.js"
import { Icon, Table, Button, Input, Dropdown } from 'semantic-ui-react'
import { useState } from 'react';
import SignInModal from "../components/SignInModal/signInModal.js";
import React from "react"
import { useRouter } from "next/router"
import styles from "../../styles/deployment.module.css"

var id = ""

export default function Deployment(props) {

    const router = useRouter()
    id = router.query.id
    const [deployment, setDeployment] = useState({})
    if (id && !deployment.id) {
        getDeploymentInformation(id).then(data => {
            setDeployment(data)
        })
    }
    const [tabIndex, setTabIndex] = useState(0)
    const tabs = [<Explore key="0"/>, <Deploy key="1"/>, <Console key="2"/>, <Settings key="3"/>];
    const tabNames = ["Explore", "Deploy", "Console", "Settings"]
    return (
        <div>
            <Head>
                <title>{deployment.name} Deployment | NDS</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/logo.svg" />
            </Head>
            <main>
                <Header />
                <div className='main'>
                    <div>
                        <h2>Deployment name: {deployment.name}</h2>
                    </div>
                    <div className={styles.header}>
                        {
                            tabNames.map((name, index) => {
                                if (tabIndex === index) {
                                    return (
                                        <span key={index} onClick={() => { setTabIndex(index); }} className={styles.onpage}>{name}</span>
                                    )
                                } else {
                                    return (
                                        <span key={index} onClick={() => { setTabIndex(index); }}>{name}</span>
                                    )
                                }
                            })
                        }
                    </div>
                    <div style={{ marginTop: "20px" }}>
                        {tabs[tabIndex]}
                    </div>
                </div>
            </main>
            <Footer />
        </div>
    )
}


function Explore() {
    const [files, setFiles] = useState([{
        name: <Icon loading name="circle notched" />,
        loading: true
    }]);
    const [path, setPath] = useState("/");
    if (files[0] && files[0].loading) {
        getFiles()
    }
    return (
        <div>
            <h3>Explore Deployment Files</h3>
            <span>These files do not reflect changes that your deployment made.</span>
            <Table celled striped>
                <Table.Header>
                    <Table.Row>
                        <Table.HeaderCell colSpan='3'>{path}
                            <Icon name="level up" onClick={moveUp} style={{ float: "right", cursor: "pointer" }} />
                        </Table.HeaderCell>
                    </Table.Row>
                </Table.Header>

                <Table.Body>
                    {
                        files.map((file, index) => {
                            let icon = "file outline";
                            let onclick = function () {
                                window.open("/api/deployments?auth=" + getCachedAuth() + "&action=getFile&id=" + id + "&path=" + path + "/" + file.name)
                            }
                            if (file.isDirectory) {
                                icon = "folder"
                                onclick = function () {
                                    moveDown(file.name)
                                }
                                file.size = "~"
                            } else {
                                file.size = normalizeBytes(file.size)
                            }
                            let date = new Date(file.birthtime)
                            return (
                                <Table.Row key={index} onClick={onclick} className={styles.exploreRow}>
                                    <Table.Cell>
                                        <Icon name={icon} /> {file.name}
                                    </Table.Cell>
                                    <Table.Cell>{file.size}</Table.Cell>
                                    <Table.Cell textAlign='right'>{date.toDateString()}</Table.Cell>
                                </Table.Row>
                            )
                        })
                    }
                </Table.Body>
            </Table>
        </div>
    )
    function moveUp() {
        var newPath = path.split("/").slice(0, -1).join("/")
        if (newPath === "") newPath = "/"
        setPath(newPath)
        setFiles([{
            name: <Icon loading name="circle notched" />,
            loading: true
        }])
    }
    function moveDown(file) {
        if (path.endsWith("/")) {
            setPath(path + file)
        } else {
            setPath(path + "/" + file)
        }
        setFiles([{
            name: <Icon loading name="circle notched" />,
            loading: true
        }])
    }
    function getFiles() {
        if (!id) {
            setTimeout(function () {
                getFiles()
            }, 1000)
            return;
        }
        fetch(`/api/deployments?auth=${getCachedAuth()}&action=getFiles&id=${id}&path=${path}`)
            .then(res => res.json())
            .then(data => {
                if (data.error) {
                    setFiles([{
                        name: data.error,
                        loading: false
                    }])
                } else {
                    setFiles(data.data)
                }
            })
    }
}

function Deploy() {
    return (
        <div>
            <h3>Upload zip file </h3>
            <form action={`/api/deployments?auth=${getCachedAuth()}&id=${id}&action=uploadDeployment`} method="POST" encType="multipart/form-data">
                <Input type="file" name="zip" accept=".zip"/>
                <Input type="hidden" name="auth" value={getCachedAuth()}></Input>
                <Input type="hidden" name="id" value={id}></Input>
                <Input type="hidden" name="action" value="uploadDeployment"></Input>
                <br></br>
                <Input type="submit"></Input>
            </form>
        </div>
    )
}
class Console extends React.Component {
    render() {
        return (
            <div>
                <h3>Put console stuff here</h3>
            </div>
        )
    }
}
class Settings extends React.Component {
    render() {
        return (
            <div>
                <h3>Put settings stuff here</h3>
            </div>
        )
    }
}

function getCachedAuth() {
    if (typeof sessionStorage !== "undefined") {
        if (sessionStorage.getItem("auth")) {
            return sessionStorage.getItem("auth")
        } else {
            return localStorage.getItem("auth")
        }
    }
}
async function getDeploymentInformation(id) {
    const res = await fetch(`/api/deployments?auth=${getCachedAuth()}&action=getDeploymentInformation&id=${id}`);
    const data = await res.json();
    return data.data
}


function normalizeBytes(bytes) {
    if (bytes < 1024) {
        return bytes + " Bytes"
    } else if (bytes < 1024 * 1024) {
        return (bytes / 1024).toFixed(2) + " KB"
    } else if (bytes < 1024 * 1024 * 1024) {
        return (bytes / 1024 / 1024).toFixed(2) + " MB"
    } else {
        return (bytes / 1024 / 1024 / 1024).toFixed(2) + " GB"
    }
}