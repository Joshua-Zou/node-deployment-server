import Head from 'next/head'
import Image from 'next/image'
import styles from '../../styles/Admin.module.css'
import Footer from "../components/Footer/footer.js";
import Header from "../components/Header/header.js"
import { Icon, Table, Button, Input, Dropdown, Checkbox, Accordion, Modal } from 'semantic-ui-react'
import { useState, useRef, useCallback} from 'react';
import React from "react"
import ActiveLink from '../components/ActiveLink';
const { useRouter } = require('next/router');

var id = ""

export default function Volumes() {
    const router = useRouter()
    const [render, setRender] = useState(false);

    id = router.query.id
    getLoginInfo().then(data => {
        if (!data.error) {
            setRender(true);
        }
    })
    return (
        <div>
            <Head>
                <title>Jobs | NDS</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/logo.svg" />
            </Head>
            <main>
                <Header />
                <div className='main'>
                    <Body render={render} />
                </div>
            </main>
            <Footer />
        </div>
    )
}
function Body(props) {
    if (!props.render) return (<h2 style={{ color: "red" }}>Authentication Required!</h2>)
    return (
        <div>
            <DataWrapper />
        </div>
    )
}
function DataWrapper() {
    const [job, setJob] = useState({
        loading: true,
        actions: [
            {
                data: {}
            }
        ]
    });
    const [volumes, setVolumes] = useState([]);
    const [containers, setContainers] = useState([]);
    var newData = useRef({})
    var saveMsg = useRef(null)

    if (job.loading === true) {
        getJob().then(data => {
            newData.current = data;
            setJob(data)
        })
        getVolumes(true).then(data => {
            setVolumes(data)
        })
        getDeployments(true).then(data => {
            setContainers(data)
        })
    }
    return (
        <Data />
    )
    function Data() {
        return (
            <div>
                <h1>Job: <span style={{ fontSize: "0.8em" }}>{job.name}</span></h1>
                <hr />
                <br />
                <div style={{ fontSize: "1.2em" }}>
                    <span style={{ verticalAlign: "top", fontWeight: "bold", marginRight: "10px" }}>Job Enabled</span>
                    <Checkbox toggle defaultChecked={job.enabled} onChange={(e, d) => {
                        newData.current.enabled = d.checked;
                    }} />
                    <br />
                    <br />
                    <Input label="Run every x minutes" min="10" style={{ width: "100px" }} placeholder="x" type='number' size='mini' defaultValue={job.run_every} onChange={(e) => {
                        newData.current.run_every = Number(e.target.value);
                    }} />
                    <br />
                    <br />
                    <Input label="Name" style={{ width: "100px" }} placeholder="Name" size='mini' defaultValue={job.name} onChange={(e) => {
                        newData.current.name = e.target.value;
                    }} />

                    <h3>Actions</h3>
                    <Actions />
                    <span ref={saveMsg} style={{color: "red"}}></span>
                    <br/>
                    <br/>
                    <Button content="Save" primary onClick={async () => {
                        let newJob = newData.current;
                        if (!newJob.run_every >= 10) {
                            alert("Run interval must be greater than 10 minutes")
                            return
                        }
                        const res = await fetch(`/api/jobs?auth=${getCachedAuth()}&action=updateJob&id=${id}&job=${btoa(JSON.stringify(newJob))}`);
                        const data = await res.json();
                        if (data.error) {
                            alert(data.error)
                        } else {
                            alert("Job Updated!")
                            window.location.reload();
                        }
                    }} />
                </div>
            </div>
        )
        function Actions(props) {
            const [activeIndices, setActiveIndices] = useState([]);
            const [clear, setClear] = useState(false);
            const [modalData, setModalData] = useState({
                open: false,
                callbacks: {},
                text: {}
            });

            if (clear) {
                setTimeout(function () {
                    setClear(false);
                }, 100)
                return (<div></div>)
            }

            function handleClick(e, titleProps) {
                const { index } = titleProps
                var newActiveIndices = Array.from(activeIndices);
                newActiveIndices[index] = !newActiveIndices[index]
                setActiveIndices(newActiveIndices);
            }
            function closeModal() {
                setModalData({
                    open: false,
                    callbacks: {},
                    text: {}
                })
            }
            var list = job.actions;
            if (props.customList) list = props.customList;
            return (
                <div>
                    <Accordion styled fluid exclusive={false} style={{ marginBottom: "20px" }}>
                        {
                            list.map((action, i) => {
                                return (
                                    <div key={i}>
                                        <Accordion.Title
                                            active={activeIndices[i]}
                                            index={i}
                                            onClick={handleClick}>
                                            {i}
                                            &nbsp;
                                            <Icon name='dropdown' />
                                            {action.action}
                                            <Icon name="delete" style={{cursor: "pointer", float: "right"}} onClick={() => {
                                                showChanges();
                                                if (props.customList) {
                                                    newData.current.actions[props.actionIndex].data[props.dataKey].splice(i, 1);
                                                    setJob(newData.current);
                                                    setActiveIndices([])
                                                    setClear(true)
                                                } else {
                                                    newData.current.actions.splice(i, 1);
                                                    setJob(newData.current);
                                                    setActiveIndices([])
                                                    setClear(true)
                                                }
                                            }}/>
                                        </Accordion.Title>
                                        <Accordion.Content active={activeIndices[i]} style={{ color: "black" }}>
                                            {
                                                Object.entries(action.data || action).map(([key, value], j) => {
                                                    if (key === "volume_id") {
                                                        return (
                                                            <div key={j}>
                                                                <Input value="volume" disabled />
                                                                <Input style={{ width: "218px" }}>
                                                                    <Dropdown fluid placeholder='Volume' search selection options={volumes} defaultValue={value} onChange={(e, d) => {
                                                                        if (props.customList) {
                                                                            newData.current.actions[props.actionIndex].data[props.dataKey][i][key] = d.value;
                                                                        } else newData.current.actions[i].data[key] = d.value;
                                                                        showChanges();
                                                                    }} />
                                                                </Input>
                                                            </div>
                                                        )
                                                    } else if (key === "container_id") {
                                                        return (
                                                            <div key={j}>
                                                                <Input value="deployments" disabled />
                                                                <Input style={{ width: "218px" }}>
                                                                    <Dropdown fluid placeholder='deployments' search selection options={containers} defaultValue={value} onChange={(e, d) => {
                                                                        if (props.customList) {
                                                                            newData.current.actions[props.actionIndex].data[props.dataKey][i][key] = d.value;
                                                                        } else newData.current.actions[i].data[key] = d.value;
                                                                        showChanges();
                                                                    }} />
                                                                </Input>
                                                            </div>
                                                        )
                                                    } else if (key === "running" || key === "failed to start") {
                                                        return (
                                                            <div key={j}>
                                                                <h4>When discovered that deployment is <span style={{ backgroundColor: "rgba(0,0,0,0.08)", padding: "0px 5px" }}>{key}</span></h4>
                                                                <Actions customList={value} actionIndex={i} dataKey={key} refreshFunction={setActiveIndices} />
                                                            </div>
                                                        )
                                                    } else if (key === "type" && value === "fetch") {
                                                        return (
                                                            <div key={j}>
                                                                <Input value={key} disabled />
                                                                <Input value={value} disabled />
                                                            </div>
                                                        )
                                                    } else if (key === "type" && value !== "fetch") {
                                                        return (
                                                            <div key={j}>
                                                                <Input value={key} disabled />
                                                                <Input placeholder="pause | unpause | restart | delete" defaultValue={value} onChange={(e, d) => {
                                                                    if (props.customList) {
                                                                        newData.current.actions[props.actionIndex].data[props.dataKey][i][key] = d.value;
                                                                    } else newData.current.actions[i].data[key] = d.value;
                                                                    showChanges();
                                                                }} />
                                                                <span style={{ marginLeft: "5px", fontSize: "0.8em" }}><b>Options: </b>pause | unpause | restart | stop | remove</span>
                                                            </div>
                                                        )
                                                    } else if (key !== "action") {
                                                        return (
                                                            <div key={j}>
                                                                <Input value={key} disabled />
                                                                <Input defaultValue={value} onChange={(e, d) => {
                                                                    if (props.customList) {
                                                                        newData.current.actions[props.actionIndex].data[props.dataKey][i][key] = d.value;
                                                                    } else newData.current.actions[i].data[key] = d.value;
                                                                    showChanges();
                                                                }} />
                                                            </div>
                                                        )
                                                    } else {
                                                        return (<div></div>)
                                                    }
                                                })
                                            }
                                            <br />
                                        </Accordion.Content>
                                    </div>
                                )
                            })
                        }
                        <Accordion.Title style={{paddingLeft: "12px"}} active={false} onClick={() => {
                            if (props.customList) {
                                setModalData({
                                    open: true,
                                    text: {
                                        btn1: "Fetch API",
                                        btn2: "Manipulate Container"
                                    },
                                    callbacks: {
                                        cancelCallback: () => {
                                            closeModal()
                                        },
                                        btn1: () => {
                                            closeModal()
                                            newData.current.actions[props.actionIndex].data[props.dataKey].push({
                                                type: "fetch",
                                                method: "POST",
                                                url: "https://www.example.com",
                                                body: "{}"
                                            })
                                            setJob(newData.current);
                                            setActiveIndices([])
                                            setClear(true)
                                            showChanges();
                                        },
                                        btn2: () => {
                                            closeModal()
                                            newData.current.actions[props.actionIndex].data[props.dataKey].push({
                                                type: "restart",
                                                container_id: ""
                                            })
                                            setJob(newData.current);
                                            setActiveIndices([])
                                            setClear(true)
                                            showChanges();
                                        }
                                    }
                                })
                            } else {
                                setModalData({
                                    open: true,
                                    text: {
                                        btn1: "Backup Volume",
                                        btn2: "Check Deployment Status"
                                    },
                                    callbacks: {
                                        cancelCallback: () => {
                                            closeModal()
                                        },
                                        btn1: () => {
                                            closeModal()
                                            newData.current.actions.push({
                                                action: "backup_volume", 
                                                data: {
                                                    volume_id: "",
                                                    path: "/"
                                                } 
                                            })
                                            setJob(newData.current);
                                            setActiveIndices([])
                                            setClear(true)
                                            showChanges();
                                        },
                                        btn2: () => {
                                            closeModal()
                                            newData.current.actions.push({ 
                                                action: "check_deployment", 
                                                data: {
                                                    container_id: "",
                                                    running: [],
                                                    "failed to start": []
                                                }
                                            })
                                            setJob(newData.current);
                                            setActiveIndices([])
                                            setClear(true)
                                            showChanges();
                                        }
                                    }
                                })
                            }
                        }}>
                            <Icon name='plus circle' />
                            New Action
                        </Accordion.Title>
                    </Accordion>
                    <NewModal data={modalData}/>
                </div>
            )
            function NewModal(props) {
                return (
                    <Modal
                        size={"small"}
                        open={props.data.open}
                        onClose={() => {props.data.callbacks.cancelCallback()}}
                    >
                        <Modal.Header>Action Type</Modal.Header>
                        <Modal.Content>
                            <p style={{color: "black"}}>Choose action type to run</p>
                        </Modal.Content>
                        <Modal.Actions>
                            <Button onClick={() => {props.data.callbacks.btn1() }}>
                                {props.data.text.btn1}
                            </Button>
                            <Button onClick={() => {props.data.callbacks.btn2() }}>
                                {props.data.text.btn2}
                            </Button>
                        </Modal.Actions>
                    </Modal>
                )
            }
        }
        function showChanges() {
            saveMsg.current.innerHTML = "You have unsaved changes!"
        }
    }
}



async function getVolumes(dropdownFormat) {
    const res = await fetch(`/api/volumes?auth=${getCachedAuth()}&action=listVolumes`);
    const data = await res.json()
    let volumes = data.data;
    let deployments = await getDeployments()
    for (let i in volumes) {
        for (let p in deployments) {
            if (deployments[p].volumes.find(x => {
                if (!volumes[i].DockerInfo) return false;
                else return x.id === volumes[i].DockerInfo.Name.slice("nds-config-".length)
            })) {
                volumes[i].attachedDeployment = deployments[p].name
            } else {
                volumes[i].attachedDeployment = "N/A"
            }
        }
    }
    if (dropdownFormat) {
        return volumes.map(x => {
            return {
                key: x.id,
                value: x.id,
                text: x.name
            }
        })
    }
    return volumes
}

async function getDeployments(dropdownFormat) {
    const response = await fetch(`/api/deployments?auth=${getCachedAuth()}&action=getDeployments`);
    const data = await response.json();
    if (dropdownFormat) {
        return data.data.map(x => {
            return {
                key: x.id,
                value: x.id,
                text: x.name
            }
        })
    }
    return data.data
}

async function getJobs() {
    const res = await fetch(`/api/jobs?auth=${getCachedAuth()}&action=listJobs`);
    const data = await res.json()
    return data.data
}
async function getJob() {
    let jobs = await getJobs();
    return jobs.find(x => x.id === id)
}

async function getLoginInfo() {
    const res = await fetch(`/api/user?auth=${getCachedAuth()}`);
    const data = await res.json()
    return data;
}
function getCachedAuth() {
    if (typeof sessionStorage !== "undefined") {
        if (sessionStorage.getItem("auth")) {
            return sessionStorage.getItem("auth")
        } else {
            return localStorage.getItem("auth")
        }
    }
}